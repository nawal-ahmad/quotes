/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package quotes;

import com.google.common.reflect.TypeToken;
import com.google.gson.Gson;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;


public class App {
    public static void main(String[] args) throws Exception {
        readJsonFile();
        readAPI();
    }

    public static APIQuotes readAPI() throws Exception {
        APIQuotes apiQuotes = new APIQuotes();
        try {
            URL url = new URL("http://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en");
            HttpURLConnection connect = (HttpURLConnection) url.openConnection();
            connect.setRequestMethod("GET");
            connect.setConnectTimeout(5000);
            connect.setReadTimeout(5000);

            connect.connect();
            int responseCode = connect.getResponseCode();

            // check so that if the response code is not 200
            if (responseCode == HttpURLConnection.HTTP_OK) {

                InputStream input = connect.getInputStream();
                InputStreamReader inputStreamReader = new InputStreamReader(input);
                BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
                BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter("./app/src/main/resources/addedQuotes.json", false));


                // this data is the JSON
                String data = bufferedReader.readLine();
//                System.out.println(data);
                bufferedReader.close();

                Gson gson = new Gson();
                apiQuotes = gson.fromJson(data, APIQuotes.class);
                Quotes newQuote = new Quotes(apiQuotes.getQuoteAuthor(), apiQuotes.getQuoteText());
                bufferedWriter.write(gson.toJson(apiQuotes));
                bufferedWriter.close();


                System.out.println("===========================================================API Quote=========================================================");
                System.out.println("Auther: " + apiQuotes.getQuoteAuthor());
                System.out.println("Quote Text: " + apiQuotes.getQuoteText());
                System.out.println("==============================================================================================================================" + '\n' + '\n');
                connect.disconnect();
            }
        }
        catch(Exception e)  {
                    System.out.println("Request unable to processed");
                    readJsonFile();
            }
        return apiQuotes;
    }


    public static ArrayList<Quotes> readJsonFile() throws Exception {
        // Lab 8
        ArrayList<Quotes> quotes = null;
        try {
            // create Gson instance
            Gson gson = new Gson();
            // create a reader
            Reader reader = Files.newBufferedReader(Paths.get("app/src/main/resources/recentquotes.json"));
            // convert JSON array to list of quotes
            quotes = new Gson().fromJson(reader, new TypeToken<ArrayList<Quotes>>() {
            }.getType());

            // print quotes
//            quotes.forEach(System.out::println);
            int rand = (int) (Math.random() * (quotes.size()));
            System.out.println("=========================================================Local Quote=========================================================");
            System.out.println("Author: " + quotes.get(rand).getAuthor());
            System.out.println("Quote Text: " + quotes.get(rand).getText());
            System.out.println("=============================================================================================================================" + '\n' + '\n');

            // close reader
            reader.close();

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return quotes;
    }
}
